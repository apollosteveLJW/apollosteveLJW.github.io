customizing new and delete 定制new 和delete

了解allocation and deallocation routine => operatoe new and operator delete), and new-handler
heap是一个不可改动的全局化资源

item49: understand the behavior of new-handler 了解new-handler的行为
operator new失败会返回bad_alloc异常， malloc失败会返回nullptr指针
为了指定这个“用以处理内存不足”的函数，客户必须调用set_new_handler
namespace std {
  typedef void(*new_handler)();
  new_handler set_new_handler(new_handler p) throw();
}
//use example
void outOfMem() {
  std::cerr << "unable to satisfy request of memory";
  std::abort();
}

int main() {
  std::set_new_handler(outOfMem);
  int* p = new int[1000000];
}
设计良好的new_handler函数
1.让更多内存可被使用。目的是下次分配内存很可能成功。一个做法是程序一开始就分配一大块内存，而后当new_handler第一次被调用，就释放那部分内存

2.安装另一个new_handler.

3.卸载new-handler.将Null指针传给new_hander

4.不返回。通常调用abort或exit
为class定制化new-handler 


item50: understand when it makes sense to replace new and delete 了解new和delete的合理替换时机
什么时候替换编译器提供的operator new 和operator delete
1.用来检测运行上的错误
2。为了强化效果。编译器自带的operator new 和operator delete主要用于一般目的，必须处理一系列需求，比如小内存，大内存，大小混合型内存等。因此可能对你的工作不是最佳的
3.为了收集使用上的统计数据
//
static const int signature = 0xDEADBEEF;

void* operator new(std::size_t size) throw(std::bad_alloc) {
  using namespace std;
  size_t real_size = size + 2*sizeof(int);
  void p_mem = malloc(real_size);
  
  *(static_cast<int*>(p_mem)) = signature;
  *(reinterpret_cast<int*>(static_cast<Byte*>(p_mem) + real_size - sizeof(int))) = signature;
  return static_cast<Byte*>(p_mem) + sizeof(int);
};
底层调用的是malloc，返回的是static_cast<Byte*>类型
错误：
1.operator new应该包含一个循环，返回调用new-handler
2.没有考虑齐位 alignment

alignment:
计算机体系结构，要求特定的类型必须放在特定的内存地址上，比如要求指针的地址必须是4倍数，doubles的地址必须是8倍数
C++要求所有的operator news返回的指针都有适当的对齐,malloc就是在这样的要求下工作，所以返回malloc指针没有问题。但上述函数返回的不是malloc指针，偏移了一个int大小。

了解何时定制operator new and operator delete
1.为了检测运行错误
2.为了收集动态分配内存的使用统计信息
3.为了增加分配和归还的速度。泛用型分配器往往比定制型分配器慢，特别是当定制型分配器专门为某种特定类型对象设计时
4.为了降低缺省内存管理器带来的空间额外开销。泛用型分配器往往在某一个分配区快身上招引某些额外开销。针对小型对象而开发的分配器（比如boost的pool)本质上清楚了这种额外开销
5.为了弥补缺省分配器中的非最佳齐位。缺省的内存分配器并不一定保证对齐
6.为了将相关对象成簇集中。如果你知道某个特定数据结构往往被一起使用，为这些数据结构创建一个新的heap很有意义，可以将这些对象集中在尽可能少的内存页上。new和delete的placement版本有可能完成这样的集簇行为。
7.为了获得非传统的行为。希望operator new 和delete做编译器附带版没有的某学行为。比如希望分配和归还共享内存(shared memeory)

item51: adhere to convention when writing new and delete 编写new和delete需要固守陈规
operator new的返回值非常单纯，如果分配内存成功，就返回一个指针指向那块内存，如果失败，就返回bad_alloc异常
C++规定，即使客户要求0Byte，要需要返回一个指针

item52: write placement delete if you write placement new 写了placement new一定要写placement delete

