//view C++ as a federation of languages
/*中文解释
C++有多种编程特性，面向过程，面向对象，函数形式，泛型，元编程等等
C/Object-Oriented C++/template/stl
*/

//perfer const,enum,and inlines to #define
/*另一个角度说法是用编译器替代预处理器

const：#define可能会出现多份常量，而const不会出现这种情况；
  #define不会进入符号表，不好追踪

 class专属常量 static const int num_turns = 5;确保常量只有一份
注：上述代码知识声明式，C++要求使用的东西都是定义式(有地址)；需要在.cpp文件中定义 const int A::num_tures,不需要赋值，声明的时候已经确定数值了；但一般不采用这种做法，一般是在.cpp定义中初始化

enum hack：
class Player {
private:
  enum {num_turns = 5};
  ...
}
eunm与#define行为类似，都不能取地址空间

#define 与macros(宏),实现函数的功能，但没有函数调用带来的额外开销
记住，宏中所有参数带上括号，但也还是会发生意想不到的情况
#define CALL_WITH_MAX(a,b) f( (a) > (b) : (a) ? (b))
int a = 5, b = 0;
CALL_WITH_MAX(++a, b);
CALL_WITH(++a, b+10);//第一个a被累加两次，第二个累加一次

使用template inline函数替代
template<typename T>
inline void callWithMax(const T& a, const T& b) {
  f(a > b : a ? b);
}

具体规则
1.对于简单常量，用const 和enum代替define
2.对于宏macros，用inline函数替换#defines

//use const whenever possible

bitwise const: 不能改变对象内的成员变量，但如果是指针，可以改变指针指向的值

mutable(可变的) 释放对象的non-static成员变脸的bitwise constness约束

class CTextBlock {
public:
  std::size_t length() const;
private:
  char *pText;
  mutable std::size_t textLength;
  mutable bool lengthIsValid;
}
std::size_t CTextBlock::length() const {
  if(!isLenghtValid) {
    textLenght = std::strlen(pText);
    lengthIsValid = true;//mutable可以接触bitwise constness约束
  }
  return textLength;
}


//item 4 make sure the object are initialized before they're used

使用成员初始化列表才是真正的初始化，在函数体内都是赋值，会先调用默认构造函数，然后赋值，默认构造函数浪费了

static对象，main()结束时自动调用析构函数

不同编译单元中的non-local static对象，无法确定初始化顺序，所以可以用一层函数包含，变为local static对象，此即为经典的单例模式

初始化规则：
1.手动初始化内置型对象，因为C++不保证初始化
2.尽量使用初始化列表
3.用local static对象替换 non-local static对象


