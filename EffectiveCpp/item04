Designs and Declarations 设计与声明

item18:make interfaces easy to use correctly and hard to use incorrectly
explict防止隐式转换

规则：接口的一致性，与内置数据类型兼容

item19: treat class design as type design
考虑一下几个问题：
1.新type的对象如何创建并销毁
2.对象的初始化和对象的赋值该有什么样的差别？
3.新type的对象如何被pass bu value,意味着什么》copy构造函数用来定义一个新的type的pass by value行为
4.什么样的新type是合法值，构造函数，赋值操作符和setter函数需要进行的异常检查
5.type是否有继承或者被继承，影响virtual

item20:prefer pass by value to const to pass-by-value
缺省情况下，C++以by-value传递对象至函数，需要多次调用构造函数和析构函数，代价高
pass-by-value会造成切割问题，参数为父类，传入子类对象，会slice，pass-by-reference-to-const不会出现此问题

references往往以指针实现，所以内置类型可以采用pass-by-value，一般比指针小；但用户自定义类型尽量用pass-by-reference-to-const
规则：
1.尽量使用pass-by-reference-to-const代替pass-by-value
2.以上规则并不适用于内置类型，以及STL的迭代器和函数对象

item21: don't try to return a reference when you must return an object 必须返回对象时，别妄想返回reference
规则：
1.绝不要返回pointer和reference指向一个Local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能需要多个这个对象

item22: declare data members private

item23: prefer non-member non-frined functions to member functions
non-member non-friend函数封装性比member函数更高

item24: declare non-member functions when type conversions should apply to all parameters

item25: consider support for a non-throwing swap
swap 异常安全性编程的脊柱
bad coding std::swap一般形式
template<typename T>
void swap(T& a, T& b) {
  T temp(a);
  a = b;
  b = temp;
}
问题：加入类内部只有指针成员变量，
规则：
1.std::swap效率不高的时候，考虑提供一个swap成员函数，并确定这个函数不抛出异常
2.提供member swap之后，提供一个non-member swap调用前者，对于classes ，特化std::swap
3.调用swap使用using std::swap
